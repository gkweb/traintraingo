type Stop {
  stop_id: ID!
  stop_suburb: String
  route_type: Int
  stop_longitude: Float
  stop_latitude: Float
  departures: [Departure]
  stop_name: String
  directions: [Direction]
}

type Stops {
  stops: [Stop]
}

type Direction {
  direction_id: Int
  direction_name: String
  route_id: String
  route_type: String
}

type Directions {
  directions: [Direction]
}

type Disruption {
  disruption_id: Int
  sid: String
  title: String
  url: String
  description: String
  disruption_status: String
  disruption_type: String
  published_on: String
  last_updated: String
  from_date: String
  to_date: String
  colour: String
  display_on_board: Boolean
  display_status: Boolean
}

type Departure {
  stop_id: ID!
  route_id: Int
  route_type: Int
  stop_suburb: String
  stop_name: String
  run_id: Int
  direction_id: Int
  departure_sequence: Int
  disruptions: [Disruption]
  scheduled_departure_utc: String
  estimated_departure_utc: String
  platform_number: Int
  direction_name: String
}

type Pattern {
  departures: [Departure]
  disruptions: [Disruption]
  directions: [Direction]
}

type Departures {
  stop: Stop
  departures: [Departure]
  directions: [Direction]
}

type Query {
  stops(search_term: String): [Stop]
  stop(stop_id: Int): Stop
  pattern(run_id: Int): Pattern
  departures(stop_id: Int): [Departure]
}

schema {
  query: Query
}
